<#@ assembly name="System.Core" #>
<#@ include file="T4Toolbox.tt" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#+ 
public class DteFactoryTemplate : Template
{
	private EnvDTE.CodeClass concreteType;
	private EnvDTE.CodeInterface contractType;
	private string folderName;

	private IEnumerable<EnvDTE.CodeClass> allClasses;
	private IEnumerable<EnvDTE.CodeInterface> allInterfaces;

	public static AutomationHelper VisualStudioHelper;

	public DteFactoryTemplate(EnvDTE.Project project)
		: this(string.Empty)
    {
    }

	public DteFactoryTemplate(string folderName)
    {
		this.folderName = folderName;

		var project = VisualStudioHelper.CurrentProject;

		this.allClasses = VisualStudioHelper.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false).Cast<EnvDTE.CodeClass>();
		this.allInterfaces = VisualStudioHelper.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementInterface, false).Cast<EnvDTE.CodeInterface>();
    }

	public DteFactoryTemplate GenerateFactoryFor(string concreteClassName)
    {
		this.concreteType = this.allClasses.Single(x => x.Name == concreteClassName);

		return this;
    }

	public void WithContract(string contractInterfaceName)
    {
		this.contractType = this.allInterfaces.Single(x => x.Name == contractInterfaceName);
		this.RenderToFile(System.IO.Path.Combine(this.folderName, string.Format("{0}Factory.g.cs", concreteType.Name)));
    }

	public void Render()
    {
		this.RenderToFile(System.IO.Path.Combine(this.folderName, string.Format("{0}Factory.g.cs", concreteType.Name)));
    }

    public override string TransformText()
    {
#>
<#+var constructors = concreteType.Members.OfType<EnvDTE.CodeFunction>().Where(x => x.FunctionKind == EnvDTE.vsCMFunction.vsCMFunctionConstructor);
string FactoryContractType = string.Format("I{0}Factory", concreteType.Name);
string FactoryType = string.Format("{0}Factory", concreteType.Name);#>
namespace <#=contractType.Namespace.FullName#>
{
	public interface <#=FactoryContractType#>
	{
    <#+foreach (var constructor in constructors){var parameters = constructor.Parameters.Cast<EnvDTE.CodeParameter>();#>
    <#=contractType.FullName#> Create(<#=string.Join(", ", parameters.Select(parameter => string.Format("{0} {1}", parameter.Type.AsFullName, parameter.FullName)))#>);
    <#+}#>
}

    public class <#=FactoryType#> : <#=FactoryContractType#>
    {
<#+foreach (var constructor in constructors)
{
var parameters = constructor.Parameters.Cast<EnvDTE.CodeParameter>();#>
		public <#=contractType.FullName#> Create(<#=string.Join(", ", parameters.Select(parameter => string.Format("{0} {1}", parameter.Type.AsFullName, parameter.FullName)))#>)
		{
			return new <#=concreteType.FullName#>(<#=string.Join(", ", parameters.Select(parameter => parameter.Name))#>);
		}

<#+}#>
	}
}
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>