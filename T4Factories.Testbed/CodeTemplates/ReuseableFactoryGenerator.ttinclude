<#@ assembly name="System.Core" #>
<#@ assembly name="System" #>
<#@ include file="T4Toolbox.tt" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ IntelliSenseLanguage processor="tangibleT4Editor" language="C#" #>
<#+ 
public class FactoryTemplate : CSharpTemplate
{
    private const string GeneratedCodeAttribute = "global::System.CodeDom.Compiler.GeneratedCode(\"T4Factories\", \"0.1\")";

    private EnvDTE80.CodeClass2 concreteType;
    private EnvDTE.CodeInterface contractType;
    private Renderer activeRenderer;

    private EnvDTE.CodeNamespace codeNamespace;
    private IEnumerable<EnvDTE.CodeClass> allClasses;
    private IEnumerable<EnvDTE.CodeInterface> allInterfaces;

    public static TextTransformation TextTransformation;
    public static AutomationHelper VisualStudioHelper;

    private enum Renderer
    {
        FactoryInterface,
        FactoryImplementation,
    }

    public FactoryTemplate()
    {
        this.allClasses = VisualStudioHelper.GetAllCodeElementsOfType(VisualStudioHelper.CurrentProject.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false).Cast<EnvDTE.CodeClass>().ToArray();
        this.allInterfaces = VisualStudioHelper.GetAllProjects().SelectMany(project => VisualStudioHelper.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementInterface, true)).Cast<EnvDTE.CodeInterface>().ToArray();
    }

    public FactoryTemplate GenerateFactoryFor(string concreteClassName)
    {
        EnvDTE80.CodeClass2 codeClass;

        try 
        {
            codeClass = (EnvDTE80.CodeClass2)(this.allClasses.SingleOrDefault(x => x.Name == concreteClassName) ?? this.allClasses.Single(x => x.FullName == concreteClassName));
        }
        catch (InvalidOperationException)
        {
            throw new InvalidOperationException(string.Format("{0} class not found in current project", concreteClassName));
        }

        return this.GenerateFactoryFor(codeClass);
    }

    public void GenerateFactoriesForAttributedClasses()
    {
        Func<EnvDTE.CodeAttribute, bool> predicate = (a => a.FullName == "T4Factories.GenerateT4FactoryWithContractAttribute");

        foreach (var codeClass in from codeClass in this.allClasses 
                                  where codeClass.Attributes.Cast<EnvDTE.CodeAttribute>().Any(predicate)
                                  select (EnvDTE80.CodeClass2)codeClass)
        {
            var codeAttribute = codeClass.Attributes.Cast<EnvDTE.CodeAttribute>().Single(predicate);
            var attributeValue = codeAttribute.Value.Trim();
            var contractName = attributeValue.StartsWith("typeof(") ? attributeValue.Substring(7).TrimEnd(')') : string.Format("I{0}", codeClass.Name);

            this.GenerateFactoryFor(codeClass)
                .WithContract(contractName);
        }
    }

    public void WithContract(string contractInterfaceName)
    {
        try 
        {
            this.contractType = this.allInterfaces.SingleOrDefault(x => x.Name == contractInterfaceName) ?? this.allInterfaces.Single(x => x.FullName == contractInterfaceName);
        }
        catch (InvalidOperationException)
        {
            throw new InvalidOperationException(string.Format("{0} interface not found in current project", contractInterfaceName));
        }

        this.RenderFactoryForCodeElement(Renderer.FactoryImplementation, (EnvDTE.CodeType)this.concreteType, GetFactoryClassName(this.concreteType));

        var factoryInterfaceFullName = GetFactoryInterfaceFullName(this.contractType, this.concreteType);
        var factoryCodeInterface = (from codeInterface in this.allInterfaces
                                    where codeInterface.FullName == factoryInterfaceFullName
                                    let attributes = codeInterface.Attributes.Cast<EnvDTE.CodeAttribute>()
                                    where !attributes.Any(a => a.FullName.Contains("System.CodeDom.Compiler.GeneratedCodeAttribute"))
                                    select codeInterface)
                                    .SingleOrDefault();
        if (factoryCodeInterface == null)
        {
            this.RenderFactoryForCodeElement(Renderer.FactoryInterface, (EnvDTE.CodeType)this.contractType, GetFactoryInterfaceName(this.concreteType));
        }
    }

    private FactoryTemplate GenerateFactoryFor(EnvDTE80.CodeClass2 concreteType)
    {
        this.concreteType = concreteType;

        return this;
    }

    private static string GetGenericArguments(EnvDTE80.CodeClass2 codeClass)
    {
        return codeClass.IsGeneric ? codeClass.FullName.Substring(codeClass.FullName.IndexOf('<')) : string.Empty;
    }

    private static string GetFactoryInterfaceFullName(EnvDTE.CodeInterface contractType, EnvDTE80.CodeClass2 concreteType)
    {
        var factoryInterfaceFullName = string.Format("{0}.I{1}Factory{2}", contractType.Namespace.FullName, concreteType.Name, GetGenericArguments(concreteType));

        return factoryInterfaceFullName;
    }

    private static string GetFactoryInterfaceName(EnvDTE80.CodeClass2 concreteType)
    {
        var factoryInterfaceName = string.Format("I{0}Factory{1}", concreteType.Name, GetGenericArguments(concreteType));

        return factoryInterfaceName;
    }

    private static string GetFactoryClassName(EnvDTE80.CodeClass2 concreteType)
    {
        var factoryClassName = string.Format("{0}Factory{1}", concreteType.Name, GetGenericArguments(concreteType));

        return factoryClassName;
    }

    private void RenderFactoryForCodeElement(Renderer renderer, EnvDTE.CodeType codeType, string factoryName)
    {
        this.activeRenderer = renderer;
        this.codeNamespace = codeType.Namespace;

        var folderPath = Path.GetDirectoryName(codeType.ProjectItem.FileNames[0]);
        var fileName = System.IO.Path.Combine(folderPath, string.Format("{0}.Generated.cs", factoryName));
        this.RenderToFile(fileName);
    }

    private string RenderXmlDoc(string docComment)
    {
        var docXml = string.Join(string.Format("\n{0}/// ", TextTransformation.CurrentIndent),
                                 docComment.Trim()
                                            .Replace("<doc>", string.Empty)
                                            .Replace("</doc>", string.Empty)
                                            .Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries))
                          .TrimEnd();
        return string.IsNullOrEmpty(docXml) ? string.Empty : docXml.Remove(0, 2);
    }

    private void WriteUsingsRequiredFor(EnvDTE.CodeElement codeElement, EnvDTE.CodeNamespace targetNamespace)
    {
        var outerCodeElements = codeElement.ProjectItem.FileCodeModel.CodeElements;
        var outerCodeImports = outerCodeElements.OfType<EnvDTE80.CodeImport>();
        var innerCodeImports = outerCodeElements.OfType<EnvDTE.CodeNamespace>().SelectMany(x => x.Children.OfType<EnvDTE80.CodeImport>());
        var excludedNamespaces = new[] { "T4Factories", targetNamespace.FullName };
        foreach (var namespaceFullName in outerCodeImports.Concat(innerCodeImports)
                                                          .Select(x => x.Namespace)
                                                          .Concat(new[] { this.concreteType.Namespace.FullName })
                                                          .Distinct()
                                                          .Except(excludedNamespaces))
        {
            WriteLine(string.Format("using {0};", namespaceFullName));
        }
    }

    private string GetParameterAttributes(EnvDTE.CodeParameter parameter)
    {
        if (parameter.Attributes.Count == 0)
        {
            return string.Empty;
        }

        return string.Format("[{0}] ", string.Join(", ", from attribute in parameter.Attributes.Cast<EnvDTE.CodeAttribute>() select attribute.Name));
    }

    private string GetParameterModifiers(EnvDTE80.CodeParameter2 parameter)
    {
        var modifiers = new List<string>();

        if (parameter.ParameterKind.HasFlag(EnvDTE80.vsCMParameterKind.vsCMParameterKindIn))
        {
            modifiers.Add("in");
        }
        if (parameter.ParameterKind.HasFlag(EnvDTE80.vsCMParameterKind.vsCMParameterKindRef))
        {
            modifiers.Add("ref");
        }
        if (parameter.ParameterKind.HasFlag(EnvDTE80.vsCMParameterKind.vsCMParameterKindOut))
        {
            modifiers.Add("out");
        }

        return string.Join(string.Empty, modifiers.Select(m => m + " "));
    }

    private string GetParameterDefinition(EnvDTE80.CodeParameter2 parameter)
    {
        var defaultValue = string.Empty;

        if (parameter.ParameterKind.HasFlag(EnvDTE80.vsCMParameterKind.vsCMParameterKindOptional))
        {
            defaultValue = string.Format(" = {0}", parameter.DefaultValue);
        }

        return string.Format("{0}{1}{2} {3}{4}", GetParameterAttributes(parameter), GetParameterModifiers(parameter), parameter.Type.AsFullName, parameter.FullName, defaultValue);
    }

    public override string TransformText()
    {
#>
<#+var constructors = concreteType.Members.OfType<EnvDTE.CodeFunction>().Where(f => f.FunctionKind == EnvDTE.vsCMFunction.vsCMFunctionConstructor && f.Access == EnvDTE.vsCMAccess.vsCMAccessPublic);
string factoryContractTypeName = GetFactoryInterfaceName(this.concreteType);
string factoryContractTypeFullName = GetFactoryInterfaceFullName(this.contractType, this.concreteType);
string factoryTypeName = GetFactoryClassName(this.concreteType);#>
namespace <#=this.codeNamespace.FullName#>
{
<#+
    if (this.activeRenderer == Renderer.FactoryInterface)
    {
        PushIndent("    ");
        WriteUsingsRequiredFor((EnvDTE.CodeElement)this.concreteType, this.codeNamespace);
        PopIndent();
#>

    [<#=GeneratedCodeAttribute#>]
    public partial interface <#=factoryContractTypeName#>
    {
<#+
        PushIndent("        ");
        var index = 0;
        foreach (var constructor in constructors)
        {
            var parameters = constructor.Parameters.Cast<EnvDTE80.CodeParameter2>();
            if (index++ > 0)
            {
#><#=string.Empty#>
<#+
            }
#>
<#=this.RenderXmlDoc(constructor.DocComment)#>
<#=contractType.FullName#> Create(<#=string.Join(", ", parameters.Select(parameter => GetParameterDefinition(parameter)))#>);
<#+
        }
        PopIndent();
    }
    if (this.activeRenderer == Renderer.FactoryImplementation)
    {
        PushIndent("    ");
        WriteUsingsRequiredFor((EnvDTE.CodeElement)this.concreteType, this.codeNamespace);
        PopIndent();
#>

    [<#=GeneratedCodeAttribute#>]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public partial class <#=factoryTypeName#> : <#=factoryContractTypeFullName#>
    {
<#+
        PushIndent("        ");
        var index2 = 0;
        foreach (var constructor in constructors)
        {
            var parameters = constructor.Parameters.Cast<EnvDTE80.CodeParameter2>();
            if (index2++ > 0)
            {
#><#=string.Empty#>
<#+
            }
#>
<#=this.RenderXmlDoc(constructor.DocComment)#>
public <#=contractType.FullName#> Create(<#=string.Join(", ", parameters.Select(parameter => GetParameterDefinition(parameter)))#>)
{
    return new <#=concreteType.FullName#>(<#=string.Join(", ", parameters.Select(parameter => GetParameterModifiers(parameter) + parameter.Name))#>);
}
<#+
        }
        PopIndent();
    }
#>
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>