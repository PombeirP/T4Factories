<#@ assembly name="System.Core" #>
<#@ assembly name="System" #>
<#@ include file="T4Toolbox.tt" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#+ 
public class FactoryTemplate : CSharpTemplate
{
    private const string GeneratedCodeAttribute = "global::System.CodeDom.Compiler.GeneratedCode(\"T4Factories\", \"0.1\")";

    private EnvDTE80.CodeClass2 concreteType;
    private EnvDTE.CodeInterface contractType;
    private Renderer activeRenderer;

    private EnvDTE.CodeNamespace codeNamespace;
    private IEnumerable<EnvDTE.CodeClass> allClasses;
    private IEnumerable<EnvDTE.CodeInterface> allInterfaces;

    public static TextTransformation TextTransformation;
    public static AutomationHelper VisualStudioHelper;

    private enum Renderer
    {
        FactoryInterface,
        FactoryImplementation,
    }

    public FactoryTemplate()
    {
        this.allClasses = VisualStudioHelper.GetAllCodeElementsOfType(VisualStudioHelper.CurrentProject.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementClass, false).Cast<EnvDTE.CodeClass>().ToArray();
        this.allInterfaces = Enumerable.Repeat(VisualStudioHelper.CurrentProject, 1)
                                       .Concat(VisualStudioHelper.GetAllProjects())
                                       .Distinct()
                                       .Where(project => project != null && project.CodeModel != null)
                                       .SelectMany(project => VisualStudioHelper.GetAllCodeElementsOfType(project.CodeModel.CodeElements, EnvDTE.vsCMElement.vsCMElementInterface, false))
                                       .Cast<EnvDTE.CodeInterface>()
                                       .ToArray();
    }

    public FactoryTemplate GenerateFactoryFor(string concreteClassName)
    {
        EnvDTE80.CodeClass2 codeClass;

        try 
        {
            codeClass = (EnvDTE80.CodeClass2)(this.allClasses.SingleOrDefault(x => x.Name == concreteClassName) ?? this.allClasses.Single(x => x.FullName == concreteClassName));
        }
        catch (InvalidOperationException)
        {
            throw new InvalidOperationException(string.Format("{0} class not found in current project", concreteClassName));
        }

        return this.GenerateFactoryFor(codeClass);
    }

    public void GenerateFactoriesForAttributedClasses()
    {
        Func<EnvDTE.CodeAttribute, bool> predicate = (a => a.FullName == "T4Factories.GenerateT4FactoryAttribute");

        foreach (var codeClass in from codeClass in this.allClasses 
                                  where codeClass.Attributes.Cast<EnvDTE.CodeAttribute>().Any(predicate)
                                  select (EnvDTE80.CodeClass2)codeClass)
        {
            var codeAttribute = codeClass.Attributes.Cast<EnvDTE.CodeAttribute>().Single(predicate);
            var attributeValue = codeAttribute.Value.Trim();
            var contractName = attributeValue.StartsWith("typeof(") ? attributeValue.Substring(7).TrimEnd(')') : string.Format("I{0}", codeClass.Name);

            this.GenerateFactoryFor(codeClass)
                .WithContract(contractName);
        }
    }

    public void WithContract(string contractInterfaceName)
    {
        try 
        {
            this.contractType = this.allInterfaces.SingleOrDefault(x => x.Name == contractInterfaceName) ?? this.allInterfaces.Single(x => x.FullName == contractInterfaceName);
        }
        catch (InvalidOperationException)
        {
            throw new InvalidOperationException(string.Format("{0} interface not found in current project", contractInterfaceName));
        }

        this.RenderFactoryForCodeElement(Renderer.FactoryImplementation, (EnvDTE.CodeType)this.concreteType, GetSafeFileName(GetFactoryClassName(this.concreteType)));

        var factoryInterfaceFullName = GetFactoryInterfaceFullName(this.contractType, this.concreteType);
        var factoryCodeInterface = (from codeInterface in this.allInterfaces
                                    where codeInterface.FullName == factoryInterfaceFullName
                                    let attributes = codeInterface.Attributes.Cast<EnvDTE.CodeAttribute>()
                                    where !attributes.Any(a => a.FullName.Contains("System.CodeDom.Compiler.GeneratedCodeAttribute"))
                                    select codeInterface)
                                    .SingleOrDefault();
        if (factoryCodeInterface == null)
        {
            this.RenderFactoryForCodeElement(Renderer.FactoryInterface, (EnvDTE.CodeType)this.contractType, GetSafeFileName(GetFactoryInterfaceName(this.concreteType)));
        }
    }

    private string GetSafeFileName(string identifier)
    {
        return identifier.Contains("<") ? identifier.Substring(0, identifier.IndexOf("<")) : identifier;
    }

    private FactoryTemplate GenerateFactoryFor(EnvDTE80.CodeClass2 concreteType)
    {
        this.concreteType = concreteType;

        return this;
    }

    private static string GetGenericArguments(EnvDTE80.CodeClass2 codeClass)
    {
        return codeClass.IsGeneric ? codeClass.FullName.Substring(codeClass.FullName.IndexOf('<')) : string.Empty;
    }

    private static string GetFactoryInterfaceFullName(EnvDTE.CodeInterface contractType, EnvDTE80.CodeClass2 concreteType)
    {
        var factoryInterfaceFullName = string.Format("{0}.I{1}Factory{2}", contractType.Namespace.FullName, concreteType.Name, GetGenericArguments(concreteType));

        return factoryInterfaceFullName;
    }

    private static string GetFactoryInterfaceName(EnvDTE80.CodeClass2 concreteType)
    {
        var factoryInterfaceName = string.Format("I{0}Factory{1}", concreteType.Name, GetGenericArguments(concreteType));

        return factoryInterfaceName;
    }

    private static string GetFactoryClassName(EnvDTE80.CodeClass2 concreteType)
    {
        var factoryClassName = string.Format("{0}Factory{1}", concreteType.Name, GetGenericArguments(concreteType));

        return factoryClassName;
    }

    private void RenderFactoryForCodeElement(Renderer renderer, EnvDTE.CodeType codeType, string factoryName)
    {
        this.activeRenderer = renderer;
        this.codeNamespace = codeType.Namespace;

        string fileName = string.Format("{0}.Generated.cs", factoryName);
        try
        {
            var folderPath = Path.GetDirectoryName(codeType.ProjectItem.FileNames[0]);
            fileName = System.IO.Path.Combine(folderPath, fileName);
        }
        catch(ArgumentException e)
        {
            throw new ArgumentException(string.Format("Could not generate file {0}.", fileName), e);
        }

        this.RenderToFile(fileName);
    }

    private string RenderXmlDoc(string docComment)
    {
        var docXml = string.Join("\n/// ",
                                 docComment.Trim()
                                            .Replace("<doc>", string.Empty)
                                            .Replace("</doc>", string.Empty)
                                            .Split(new[] { '\n' }, StringSplitOptions.RemoveEmptyEntries))
                          .TrimEnd();
        return string.IsNullOrEmpty(docXml) ? string.Empty : docXml;
    }

    private void WriteUsingsRequiredFor(EnvDTE.CodeElement codeElement, EnvDTE.CodeNamespace targetNamespace)
    {
        var outerCodeElements = codeElement.ProjectItem.FileCodeModel.CodeElements;
        var outerCodeImports = outerCodeElements.OfType<EnvDTE80.CodeImport>();
        var innerCodeImports = outerCodeElements.OfType<EnvDTE.CodeNamespace>().SelectMany(x => x.Children.OfType<EnvDTE80.CodeImport>());
        var excludedNamespaces = new[] { "T4Factories", targetNamespace.FullName };
        foreach (var namespaceFullName in outerCodeImports.Concat(innerCodeImports)
                                                          .Select(x => x.Namespace)
                                                          .Concat(new[] { this.concreteType.Namespace.FullName })
                                                          .Distinct()
                                                          .Except(excludedNamespaces))
        {
            WriteLine(string.Format("using {0};", namespaceFullName));
        }
    }

    private string GetParameterAttributes(EnvDTE.CodeParameter parameter)
    {
        if (parameter.Attributes.Count == 0)
        {
            return string.Empty;
        }

        return string.Format("[{0}] ", string.Join(", ", from attribute in parameter.Attributes.Cast<EnvDTE.CodeAttribute>() select attribute.Name));
    }

    private string GetParameterModifiers(EnvDTE80.CodeParameter2 parameter)
    {
        var modifiers = new List<string>();

        if (parameter.ParameterKind.HasFlag(EnvDTE80.vsCMParameterKind.vsCMParameterKindIn))
        {
            modifiers.Add("in");
        }
        if (parameter.ParameterKind.HasFlag(EnvDTE80.vsCMParameterKind.vsCMParameterKindRef))
        {
            modifiers.Add("ref");
        }
        if (parameter.ParameterKind.HasFlag(EnvDTE80.vsCMParameterKind.vsCMParameterKindOut))
        {
            modifiers.Add("out");
        }

        return string.Join(string.Empty, modifiers.Select(m => m + " "));
    }

    private string GetParameterDefinition(EnvDTE80.CodeParameter2 parameter)
    {
        var defaultValue = string.Empty;

        if (parameter.ParameterKind.HasFlag(EnvDTE80.vsCMParameterKind.vsCMParameterKindOptional))
        {
            defaultValue = string.Format(" = {0}", parameter.DefaultValue);
        }

        return string.Format("{0}{1}{2} {3}{4}", 
                             GetParameterAttributes(parameter), 
                             GetParameterModifiers(parameter), 
                             GetParameterTypeFullName(parameter), 
                             parameter.FullName, 
                             defaultValue);
    }

    private string GetParameterTypeFullName(EnvDTE80.CodeParameter2 parameter)
    {
        return string.IsNullOrEmpty(parameter.Type.AsFullName) ? parameter.Type.AsString : parameter.Type.AsFullName;
    }

    private bool CompareParameters(EnvDTE80.CodeParameter2 parameter1, EnvDTE80.CodeParameter2 parameter2)
    {
        return (parameter1.FullName == parameter2.FullName);
    }

    private void WriteParameterDefinitionList(IEnumerable<EnvDTE80.CodeParameter2> parameters)
    {
        var parametersRepresentation = parameters.Select(parameter => GetParameterDefinition(parameter));
        PushIndent("    ");
        if (parameters.Count() > 1)
        {
            WriteLine(string.Empty);
            Write(string.Join(", \r\n", parametersRepresentation));
        }
        else
        {
            Write(string.Join(", ", parametersRepresentation));
        }
        Write(")");
        PopIndent();
    }

    private void WriteParameterList(IEnumerable<EnvDTE80.CodeParameter2> parameters, Func<EnvDTE80.CodeParameter2, bool> isField)
    {
        var parametersRepresentation = parameters.Select(parameter => 
                string.Format("{0}{1}{2}", 
                                isField(parameter) ? "this." : string.Empty,
                                GetParameterModifiers(parameter), 
                                parameter.Name));
        PushIndent("        ");
        if (parameters.Count() > 1)
        {
            WriteLine(string.Empty);
            Write(string.Join(", \r\n", parametersRepresentation));
        }
        else
        {
            Write(string.Join(", ", parametersRepresentation));
        }
        WriteLine(");");
        PopIndent();
    }

    public override string TransformText()
    {
#>
<#+var constructors = concreteType.Members.OfType<EnvDTE.CodeFunction>().Where(f => f.FunctionKind == EnvDTE.vsCMFunction.vsCMFunctionConstructor && f.Access == EnvDTE.vsCMAccess.vsCMAccessPublic);
string factoryContractTypeName = GetFactoryInterfaceName(this.concreteType);
string factoryContractTypeFullName = GetFactoryInterfaceFullName(this.contractType, this.concreteType);
string factoryTypeName = GetFactoryClassName(this.concreteType);#>
namespace <#=this.codeNamespace.FullName#>
{
<#+
    if (this.activeRenderer == Renderer.FactoryInterface)
    {
        PushIndent("    ");
        WriteUsingsRequiredFor((EnvDTE.CodeElement)this.concreteType, this.codeNamespace);

        ////////////////////////////////////////////////////////////////////////////
        // Generate the factory interface
        ////////////////////////////////////////////////////////////////////////////
#>

[<#=GeneratedCodeAttribute#>]
public partial interface <#=factoryContractTypeName#>
{
<#+
        PushIndent("    ");
        foreach (var constructor in constructors)
        {
            var parameters = constructor.Parameters.Cast<EnvDTE80.CodeParameter2>();
#>
#region Factory Methods
<#=this.RenderXmlDoc(constructor.DocComment)#>
<#=contractType.FullName#> Create(<#+this.WriteParameterDefinitionList(parameters);#>;
<#+
        }
#>

#endregion
<#+
        PopIndent();
        PopIndent();
    }
    if (this.activeRenderer == Renderer.FactoryImplementation)
    {
        PushIndent("    ");
        WriteUsingsRequiredFor((EnvDTE.CodeElement)this.concreteType, this.codeNamespace);
        PopIndent();

        ////////////////////////////////////////////////////////////////////////////
        // Generate the factory implementation
        ////////////////////////////////////////////////////////////////////////////
#>

    [<#=GeneratedCodeAttribute#>]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public partial class <#=factoryTypeName#> : <#=factoryContractTypeFullName#>
    {
<#+
        PushIndent("        ");
        var factoryContractType = this.allInterfaces.SingleOrDefault(x => x.FullName == factoryContractTypeFullName);
        var contractTypeMethods = factoryContractType != null ? factoryContractType.Members.OfType<EnvDTE.CodeFunction>() : Enumerable.Empty<EnvDTE.CodeFunction>();
        var allConstructorParameters = constructors.SelectMany(constructor => constructor.Parameters.Cast<EnvDTE80.CodeParameter2>());
        var allContractMethodParameters = contractTypeMethods.SelectMany(contractTypeMethod => contractTypeMethod.Parameters.Cast<EnvDTE80.CodeParameter2>());
        var injectedParameters = (from parameter in allConstructorParameters
                                 where !allContractMethodParameters.Any(contractMethodParameter => CompareParameters(contractMethodParameter, parameter))
                                 select parameter).ToArray();
        if (injectedParameters.Any())
        {

        ////////////////////////////////////////////////////////////////////////////
        // Declare the factory fields to be injected at construction time
        ////////////////////////////////////////////////////////////////////////////
#>
#region Fields

<#+
    foreach (var injectedParameter in injectedParameters)
    {
#>
private <#=GetParameterTypeFullName(injectedParameter)#> <#=injectedParameter.FullName#>;

<#+
    }
#>
#endregion

#region Constructors

public <#=factoryTypeName#>(<#+WriteParameterDefinitionList(injectedParameters); WriteLine(string.Empty);#>
{
<#+
    //////////////////////////////////////////////////////////////////////////////////////////////
    // Generate the factory constructor (when there are fields to be injected at construction time)
    //////////////////////////////////////////////////////////////////////////////////////////////

    foreach (var injectedParameter in injectedParameters)
    {
#>
    this.<#=injectedParameter.FullName#> = <#=injectedParameter.FullName#>;
<#+
    }
#>
}

#endregion

<#+
        }
#>
#region Public Factory Methods
<#+
        //////////////////////////////////////////////////////////////////////////////////////////////
        // Generate the factory methods (one for each public constructor on the target object)
        //////////////////////////////////////////////////////////////////////////////////////////////

        foreach (var constructor in constructors)
        {
            var parameters = constructor.Parameters.Cast<EnvDTE80.CodeParameter2>();
            var inputParameters = from parameter in parameters
                                  where !injectedParameters.Any(injectedParameter => injectedParameter.FullName == parameter.FullName)
                                  select parameter;
            if (!injectedParameters.Any())
            {
                //////////////////////////////////////////////////////////////////////////////////////////////
                // Include the documentation found in the target constructor (when there is a signature match)
                //////////////////////////////////////////////////////////////////////////////////////////////

#><#=this.RenderXmlDoc(constructor.DocComment)#><#+
            }
#>

public <#=contractType.FullName#> Create(<#+WriteParameterDefinitionList(inputParameters); WriteLine(string.Empty);#>
{
    return new <#=concreteType.FullName#>(<#+this.WriteParameterList(parameters, parameter => injectedParameters.Any(injectedParameter => CompareParameters(injectedParameter, parameter)));#>
}
<#+
        }
#>

#endregion
<#+
        PopIndent();
    }
#>
    }
}
<#+
        return this.GenerationEnvironment.ToString();
    }
}
#>